#!/bin/bash

# parse args with case statement
VERBOSE=0
title=""
runtags=0
tagfile=""
venv=0
usetmux=0
arg_jsondata="{}"
while [[ $# -gt 0 ]]; do
  case $1 in
    --tag) # add tags inline
      runtags=1
      if [ -z "$tagfile" ]; then
        tagfile=$(mktemp)
      fi
      shift
      echo "$1" >> $tagfile
      ;;
    -t|--title) # set title in README of created data point
      shift # pop arg
      title="$1"
      ;;
    -c|--clone) # clone from a template data point ID, bringing over all its files
      shift
      cloneid="$1"
      ;;
    -e|--venv) # start shell in a new virtual environment
      venv=1
      ;;
    -j|--json) # provide input JSON data
      shift
      arg_jsondata="$1"
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -h|--help)
      echo "Usage: $(basename $ngram_prog) $(basename $0)  [ options ] directory"
      echo "Options:"
      cat "$0" | grep '^\s\+-.|--.*'
      exit 1
      ;;
  esac
  shift
done
# TODO: template argument - pass in id to copy for template

id=$("$ngram_prog" id)
dir="$ngram_root_dir/database/$id"

# TODO: if there's a template that's linked to this template ID we're cloning then clone it too?
if [ ! -z "$cloneid" ]; then # if there's a template ID to clone from
  cp -r "$ngram_root_dir/database/$cloneid" "$dir"
  "$ngram_prog" tag -d template "$id" # remove "template" tag after creation from a template
  # TODO: check ID
else
  mkdir -p "$dir"
fi

if [ -z "$title" ]; then
  title="data point created at $(date)"
fi

echo "$arg_jsondata" > "database/$id/data.json" # initialize json

"$ngram_prog" set-title -t "$title" "$id"
if [ ! -z "$tagfile" ]; then
  for tag in $(cat "$tagfile"); do
    "$ngram_prog" tag -t "$tag" "$id"
  done
fi

echo "$id"
echo "$dir" >/dev/stderr
if [ ! -z "$tagfile" ]; then
  rm "$tagfile"
fi

if [ "$venv" = "1" ]; then
  "$ngram_prog" venv "$id"
fi
