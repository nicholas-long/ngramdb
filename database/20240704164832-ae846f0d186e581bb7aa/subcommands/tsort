#!/bin/bash

# internal
# do a topological sort of the input IDs based on their dependencies between them
# usage: ngram tsort id1 id2 id3 ...
# usage as standard input pipe: ... | ngram tsort

inputids=$(mktemp)
tsortfile=$(mktemp)
if [ ! -z "$1" ]; then
  while [ ! -z "$1" ]; do
    echo "$1" >> $inputids
    shift
  done
else
  cat > $inputids # read from stdin
fi

#echo "Input IDs:" >>/dev/stderr
#cat $inputids >>/dev/stderr
export extras=$(mktemp) # temp file to list extra ids
gawk '
ARGIND == 1 { necessary[$1] = 1 ; next }
{
  command = ENVIRON["ngram_prog"] " findrefsto " $1
  printed = 0
  while ((command | getline ref) > 0) {
    if (necessary[$1] && necessary[ref]) {
      print $1, ref
      #print $1, ref > "diag" # for debugging references
      printed = 1
      printedId[$1] = 1
      printedId[ref] = 1
    }
  }
  close(command)
  if (!printed) {
    remainders[$1] = 1
  }
}
END {
  for (id in remainders) {
    if (!printedId[id]) {
      print id > ENVIRON["extras"]
    }
  }
}
' $inputids $inputids > "$tsortfile"
#cat $inputids >/dev/stderr
#cat $tsortfile >/dev/stderr
#cat "$extras" | awk '{print "extra", $1}' >/dev/stderr
cat "$extras"
tsort "$tsortfile"

rm "$extras"
rm "$inputids"
