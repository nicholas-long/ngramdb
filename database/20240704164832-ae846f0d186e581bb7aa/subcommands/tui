#!/bin/bash

# Terminal User Interface prompt with workflow shortcuts for working with Ngram
# uses fzf for graphics

if [ -z "$DOC" ]; then
  export DOC="README.md"
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    --doc) # select document to launch - use to pass args to new tmux windows
      shift
      export DOC="$1"
      #if [ -e "$1"]; then
      #fi
      ;;
    --id) # add tags inline
      shift
      if [ ! -z "$1"]; then
        export DOC="database/$1/README.md"
      fi
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -h|--help)
      echo "Usage: $(basename $ngram_prog) $(basename $0)  [ options ] directory"
      echo "Options:"
      cat "$0" | grep '^\s\+-.|--.*'
      exit 1
      ;;
  esac
  shift
done

function menuoptions {
  echo EDIT "$DOC"
  echo CREATE
  echo COPY...
  echo "EDIT.."
  echo "EDIT..."
  if [ "$DOC" != "README.md" ]; then
    echo COPYID
    echo COPYURL
    echo TAG
    echo COPYCWD
    id=$(echo "$DOC" | awk -F / '{print $2}')
    #for attachment in $(find $(dirname "$DOC") -type f); do
    #  if ! grep ' ' <( echo "$attachment" ); then
    #    echo "EDIT" $(basename "$attachment") "$attachment"
    #  fi
    #done
    gawk '
      ARGIND == 1 { have[$1] = 1; next }
      ARGIND > 1 && have[$1] { id=$1;$1="";print "GOTO", $0, "database/" id "/README.md" }
      ' <(ngram query id "$id" refs union <(ngram query id "$id" refsto) ) <(ngram query --human)
    echo "BACK README.md go back to home"
  else
    awk '{ id=$1;$1="";print "GOTO", $0, "database/" id "/README.md" }' <(ngram query --human | tac)
  fi
  echo LINKDOC
  echo EDITCLIP
  echo SAVECLIP
  echo DIAG
  echo "CHMOD+X"
  echo TAB "$DOC"
  echo VENV
  echo RUNBATCH
  echo GIT
  echo QUIT
}

function promptfile {
  d=$(dirname "$DOC")
  find "$d" -type f | fzf
}

function promptngram {
  id=$(ngram query --human | fzf | awk '{print $1}')
  if [ ! -z "$id" ]; then
    if [ "$1" = "-d" ]; then
      echo "database/$id"
    else
      echo "$id"
    fi
  fi
}

if [ -z "$TMUX" ]; then
  echo "launching TMUX" > /dev/stderr
  tmux new -s ngram "$ngram_prog" tui
  exit 0 # the child process is now the video process
fi

while [ 1 ]; do # main tui loop
  currentid=$(echo "$DOC" | awk -F / '{print $2}')
  selectionline=$(menuoptions | fzf "--preview=$ngram_prog tui-video {}")
  if [ -z "$selectionline" ]; then
    echo Adios
    exit 1
  fi
  selectedcmd=$(echo "$selectionline" | awk '{ print $1 }')
  selecteddoc=$(echo "$selectionline" | awk '{ print $NF }')
  echo "$selectionline" >/dev/stderr # log
  echo "$selectionline" >> .ngram.tui.rc # save command history

  if [ "$selectedcmd" = "QUIT" ]; then
    echo cya
    exit 0
  elif [ "$selectedcmd" = "GOTO" ]; then
    export DOC="$selecteddoc"
  elif [ "$selectedcmd" = "TAB" ]; then
    echo tmux new-window ngram tui --doc "$selecteddoc" >/dev/stderr
    tmux new-window "$ngram_prog" tui --doc "$selecteddoc"
  elif [ "$selectedcmd" = "BACK" ]; then
    export DOC="README.md"
    echo "changing DOC back to $DOC" >/dev/stderr
  elif [ "$selectedcmd" = "VENV" ]; then
    tmux new-window ngram venv "$currentid" >/dev/stderr
  elif [ "$selectedcmd" = "EDIT" ]; then
    if [ -z "$EDITOR" ]; then
      echo EDITOR environment var is null. defaulting to vin
      export EDITOR=vim
    fi
    if [ ! -z "$selecteddoc" ]; then
      tmux new-window "$EDITOR" "$selecteddoc"
    else
      tmux new-window "$EDITOR" "$DOC"
    fi
  elif [ "$selectedcmd" = "COPY..." ]; then
    tac "$DOC" | fzf -m '--preview=echo {}' | tmux loadb -
  elif [ "$selectedcmd" = "EDITCLIP" ]; then
    tf=$(mktemp)
    tmux saveb $tf
    "$EDITOR" $tf
    tmux loadb $tf
  elif [ "$selectedcmd" = "SAVECLIP" ]; then
    read -p "Enter filename: " inputfilename
    curdir=$(dirname "$DOC")
    tmux saveb "$curdir/${inputfilename}"
  elif [ "$selectedcmd" = "CHMOD+X" ]; then
    fn=$(promptfile)
    echo "executable file prompt $fn" >/dev/stderr
    if [ ! -z "$fn" ]; then
      echo "executable file change $fn" >/dev/stderr
      chmod +x "$fn"
    fi
  elif [ "$selectedcmd" = "LINKDOC" ]; then
    linkid=$(promptngram)
    if [ ! -z "$linkid" ]; then
      echo "" >> "$DOC"
      echo "- [Ngram Linked ID $linkid](/database/$linkid)" >> "$DOC"
    fi
  elif [ "$selectedcmd" = "CREATE" ]; then
    read -p "Title: " title
    tmux new-window ngram create -t "$title" --venv
  elif [ "$selectedcmd" = "TAG" ]; then
    tag=$(cat $(ngram tagfiles) | sort -u | fzf)
    if [ -z "$tag" ]; then
      read -p "Enter New Tag: " tag
    fi
    ngram tag -t "$tag" "$currentid"
  elif [ "$selectedcmd" = "COPYID" ]; then
    echo -n "$currentid" | tmux loadb -
  elif [ "$selectedcmd" = "COPYCWD" ]; then
    realpath $(dirname $DOC) | tmux loadb -
  elif [ "$selectedcmd" = "RUNBATCH" ]; then
    "$ngram_prog" run
  elif [ "$selectedcmd" = "GIT" ]; then
    if which lazygit
    then lazygit
    else git log
    fi
  elif [ "$selectedcmd" = "DIAG" ]; then
    env
    sleep 10
  elif [ "$selectedcmd" = "EDIT.." ]; then
    export dir=$(dirname "$DOC")
    ls $(dirname "$DOC") | fzf -m '--preview=bat {}' | awk '{print ENVIRON["dir"] "/" $1}' | xargs -o $EDITOR -p
  elif [ "$selectedcmd" = "EDIT..." ]; then
    find $(dirname "$DOC") -type f | fzf -m '--preview=bat {}' | xargs -o $EDITOR -p
  fi
done
