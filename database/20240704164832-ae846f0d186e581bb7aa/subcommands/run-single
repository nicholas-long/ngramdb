#!/bin/bash

# root run script for an ID

id="$1"

# check dir ID exists
if [ ! -d "database/$id" ]; then
  echo "unable to run: missing ID $id" >/dev/stderr
  exit 1
fi
program="database/$id/run"
if [ ! -x "$program" ]; then 
  echo "unable to run: missing run entrypoint for ID $id : $program" >/dev/stderr
  if [ -f "$program" ]; then
    echo "Tip: the run file exists, but is not executable. run: chmod +x $program" >/dev/stderr
  fi
  exit 1
fi

# TODO: host partitioning
# TODO: docker containerization of runs for directory data sandboxing
stdoutfile="database/$id/stdout.log"
stderrfile="database/$id/stderr.log"
runstats="database/$id/.ngram.dependencies.hashes"

if ! "$ngram_prog" hastag live "$id" ; then # always run program that is tagged live - fast and current data
  # if there's previous run stats then compare against current dependency file contents and skip the run if they are identical
  if [ -f "$runstats" ]; then
    if diff <("$ngram_prog" dependstats "$id") "$runstats"; then
      echo "run skipped by optimization: identical dependency conditions" >/dev/stderr
      exit 2
    fi
  fi
fi

if [ -s "$stdoutfile" ]; then
  echo "storing previous console output" >/dev/stderr
  ( echo ">>>>>>>>>> RUN STDOUT STARTED" $( date -r "$stdoutfile" ) && cat "$stdoutfile" ) | gzip >> "${stdoutfile}.gz"
fi

if [ -s "$stderrfile" ]; then
  echo "storing previous console stderr" >/dev/stderr
  cat "$stderrfile" | gzip > "${stderrfile}.gz"
  ( echo ">>>>>>>>>> RUN STDERR STARTED" $( date -r "$stderrfile" ) && cat "$stderrfile" ) | gzip >> "${stderrfile}.gz"
fi

# execute program and overwrite output files when finished
"$program" 2> "$stderrfile" | "$ngram_prog" replace "$stdoutfile"
"$ngram_prog" dependstats "$id" > "$runstats"
