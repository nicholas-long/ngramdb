#!/bin/bash

# run a single ID, process all conditions, set environment, and perform all output logging as necessary.

id="$1"
# exported values in environment to be used by subcommands
export NGRAM_ID="$id"
export NGRAM_ID_DIR="database/$id"

echo "running Ngram ID $id" >/dev/stderr
head -n 1 "$NGRAM_ID_DIR/README.md"

# check dir ID exists
if [ ! -d "$NGRAM_ID_DIR" ]; then
  echo "unable to run: missing ID $id" >/dev/stderr
  exit 1
fi
program="$NGRAM_ID_DIR/run"
if [ ! -x "$program" ]; then 
  echo "unable to run: missing run entrypoint for ID $id : $program" >/dev/stderr
  if [ -f "$program" ]; then
    echo "Tip: the run file exists, but is not executable. run: chmod +x $program" >/dev/stderr
  fi
  exit 1
fi

# TODO: host partitioning
# TODO: docker containerization of runs for directory data sandboxing
stdoutfile="$NGRAM_ID_DIR/stdout.log"
stderrfile="$NGRAM_ID_DIR/stderr.log"
runstats="$NGRAM_ID_DIR/.ngram.dependencies.hashes"

if ! "$ngram_prog" hastag live "$id" ; then # always run program that is tagged live - fast and current data
  # if there's previous run stats then compare against current dependency file contents and skip the run if they are identical
  if [ -f "$runstats" ]; then
    temprunstats=$(mktemp)
    "$ngram_prog" dependstats "$id" > "$temprunstats"
    if diff "$temprunstats" "$runstats"; then
      echo "run skipped by optimization: identical dependency conditions" >/dev/stderr
      exit 2
    fi
    # this is not necessary - programs should not be tracking changes to their own output because the hashes are computed after running, and so should only detect actual changes
    ## at this point, we know there are differences in the file, check if all differences are within the target ngram => not rerun
    ## also check for inbox files - those SHOULD trigger a rerun
    #set -o pipefail # make sure the results of the last program in a chain of pipes is tracked
    #export id
    #diff "$runstats" "$temprunstats" | awk '
    #  (/^>/ || /^</) {
    #    if ($NF !~ ENVIRON["id"] || $NF ~ /\/inbox\//) {
    #      print "i am running", ENVIRON["id"], "because", $0 > "/dev/stderr"
    #      exit 0
    #    }
    #  }
    #  END { exit 1 }
    #'
    #result="$?"
    #echo "run stats optimization check result $result" >/dev/stderr
    #rm "$temprunstats"
    #if [ "$result" != "0" ]; then
    #  echo "run skipped by optimization: ignoring only self modification" >/dev/stderr
    #  exit 2
    #fi
  fi
fi

if [ -s "$stdoutfile" ]; then
  echo "storing previous console output" >/dev/stderr
  ( echo ">>>>>>>>>> RUN STDOUT STARTED" $( date -r "$stdoutfile" ) && cat "$stdoutfile" ) | gzip >> "${stdoutfile}.gz"
fi

if [ -s "$stderrfile" ]; then
  echo "storing previous console stderr" >/dev/stderr
  cat "$stderrfile" | gzip > "${stderrfile}.gz"
  ( echo ">>>>>>>>>> RUN STDERR STARTED" $( date -r "$stderrfile" ) && cat "$stderrfile" ) | gzip >> "${stderrfile}.gz"
fi

# execute program and overwrite output files when finished
export LC_LOCALE=C # for consistent sort ordering across platforms within nested programs
(cd "$NGRAM_ID_DIR" && ./run) 2> "$stderrfile" | "$ngram_prog" replace "$stdoutfile"
"$ngram_prog" dependstats "$id" > "$runstats"

echo "done running Ngram ID $id" >/dev/stderr

if "$ngram_prog" hastag live "$id" ; then # always run program that is tagged live - fast and current data
  exit 3 # this makes sense - if something is live then it is pretending not to run so it doesn't affect the rerunning stats
fi
